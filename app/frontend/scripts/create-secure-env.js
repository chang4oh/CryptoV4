#!/usr/bin/env node

/**
 * Secure Environment Setup Script
 * 
 * This script creates a secure .env.local file for MeiliSearch initialization
 * without exposing API keys in your codebase.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import readline from 'readline';

// Get current file path and directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Create interactive prompt
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Define paths
const exampleEnvPath = path.join(__dirname, '.env.example');
const targetEnvPath = path.join(__dirname, '../.env.local');
const backupEnvPath = path.join(__dirname, '../.env.backup');

// Console colors
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

console.log(`
${colors.blue}╔════════════════════════════════════════════════════════╗
║ CryptoV4 Secure MeiliSearch Environment Configuration  ║
╚════════════════════════════════════════════════════════╝${colors.reset}
`);

// Check if .env.example exists
if (!fs.existsSync(exampleEnvPath)) {
  console.error(`${colors.red}❌ Error: .env.example file not found at ${exampleEnvPath}${colors.reset}`);
  process.exit(1);
}

// Read the example file
const exampleEnvContent = fs.readFileSync(exampleEnvPath, 'utf8');

// Backup existing file if it exists
if (fs.existsSync(targetEnvPath)) {
  console.log(`${colors.yellow}⚠️  Existing .env.local file found${colors.reset}`);
  rl.question(`Do you want to override it? (y/N): `, (answer) => {
    if (answer.toLowerCase() !== 'y') {
      console.log(`${colors.yellow}Operation cancelled.${colors.reset}`);
      rl.close();
      process.exit(0);
    }
    
    // Backup the existing file
    fs.copyFileSync(targetEnvPath, backupEnvPath);
    console.log(`${colors.green}✅ Created backup at ${backupEnvPath}${colors.reset}`);
    collectValues();
  });
} else {
  collectValues();
}

function collectValues() {
  console.log(`\n${colors.cyan}Please enter your MeiliSearch configuration:${colors.reset}`);
  
  rl.question(`MeiliSearch Host URL [https://ms-9b64a745af4d-19359.sfo.meilisearch.io]: `, (host) => {
    const meilisearchHost = host || 'https://ms-9b64a745af4d-19359.sfo.meilisearch.io';
    
    rl.question(`Search API Key (for frontend): `, (searchKey) => {
      if (!searchKey) {
        console.log(`${colors.yellow}⚠️  Warning: No Search API Key provided. This is needed for frontend search.${colors.reset}`);
      }
      
      rl.question(`Admin API Key (for initialization): `, (adminKey) => {
        if (!adminKey) {
          console.log(`${colors.yellow}⚠️  Warning: No Admin API Key provided. This is needed for index initialization.${colors.reset}`);
        }
        
        createEnvFile(meilisearchHost, searchKey, adminKey);
      });
    });
  });
}

function createEnvFile(host, searchKey, adminKey) {
  // Create the environment file content with user-provided values
  const envContent = `# MeiliSearch Configuration
# Auto-generated by setup script - DO NOT COMMIT THIS FILE

# MeiliSearch instance URL
VITE_MEILISEARCH_HOST=${host}

# For frontend - use Search API Key (Read-only)
VITE_MEILISEARCH_API_KEY=${searchKey}

# For initialization scripts - use Admin API Key
# Never expose this in client-side code or public repositories
MEILISEARCH_ADMIN_KEY=${adminKey}
`;

  // Write the file
  fs.writeFileSync(targetEnvPath, envContent);
  console.log(`\n${colors.green}✅ Created .env.local file successfully at ${targetEnvPath}${colors.reset}`);
  
  console.log(`\n${colors.blue}ℹ️  Next steps:${colors.reset}`);
  console.log(`1. Run ${colors.cyan}npm run meilisearch:init${colors.reset} to initialize your indexes`);
  console.log(`2. Run ${colors.cyan}npm run meilisearch:populate${colors.reset} to add sample data (optional)`);
  console.log(`\n${colors.yellow}⚠️  IMPORTANT: .env.local is already in .gitignore to prevent leaking API keys${colors.reset}`);
  
  rl.close();
}

// Handle the close event
rl.on('close', () => {
  console.log(`\n${colors.green}Setup complete!${colors.reset}`);
  process.exit(0);
}); 